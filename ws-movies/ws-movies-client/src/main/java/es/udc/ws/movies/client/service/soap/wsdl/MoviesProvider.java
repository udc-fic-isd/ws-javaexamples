
package es.udc.ws.movies.client.service.soap.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "MoviesProvider", targetNamespace = "http://soap.ws.udc.es/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface MoviesProvider {


    /**
     * 
     * @param movieDto
     * @return
     *     returns java.lang.Long
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addMovie", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.AddMovie")
    @ResponseWrapper(localName = "addMovieResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.AddMovieResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/addMovieRequest", output = "http://soap.ws.udc.es/MoviesProvider/addMovieResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/MoviesProvider/addMovie/Fault/SoapInputValidationException")
    })
    public Long addMovie(
        @WebParam(name = "movieDto", targetNamespace = "")
        ServiceMovieDto movieDto)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param movieId
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @RequestWrapper(localName = "removeMovie", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.RemoveMovie")
    @ResponseWrapper(localName = "removeMovieResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.RemoveMovieResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/removeMovieRequest", output = "http://soap.ws.udc.es/MoviesProvider/removeMovieResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/MoviesProvider/removeMovie/Fault/SoapInstanceNotFoundException")
    })
    public void removeMovie(
        @WebParam(name = "movieId", targetNamespace = "")
        Long movieId)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param creditCardNumber
     * @param movieId
     * @param userId
     * @return
     *     returns java.lang.Long
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buyMovie", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.BuyMovie")
    @ResponseWrapper(localName = "buyMovieResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.BuyMovieResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/buyMovieRequest", output = "http://soap.ws.udc.es/MoviesProvider/buyMovieResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/MoviesProvider/buyMovie/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/MoviesProvider/buyMovie/Fault/SoapInputValidationException")
    })
    public Long buyMovie(
        @WebParam(name = "movieId", targetNamespace = "")
        Long movieId,
        @WebParam(name = "userId", targetNamespace = "")
        String userId,
        @WebParam(name = "creditCardNumber", targetNamespace = "")
        String creditCardNumber)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param movieDto
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "updateMovie", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.UpdateMovie")
    @ResponseWrapper(localName = "updateMovieResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.UpdateMovieResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/updateMovieRequest", output = "http://soap.ws.udc.es/MoviesProvider/updateMovieResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/MoviesProvider/updateMovie/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/MoviesProvider/updateMovie/Fault/SoapInstanceNotFoundException")
    })
    public void updateMovie(
        @WebParam(name = "movieDto", targetNamespace = "")
        ServiceMovieDto movieDto)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param keywords
     * @return
     *     returns java.util.List<es.udc.ws.movies.client.service.soap.wsdl.ServiceMovieDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findMovies", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.FindMovies")
    @ResponseWrapper(localName = "findMoviesResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.FindMoviesResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/findMoviesRequest", output = "http://soap.ws.udc.es/MoviesProvider/findMoviesResponse")
    public List<ServiceMovieDto> findMovies(
        @WebParam(name = "keywords", targetNamespace = "")
        String keywords);

    /**
     * 
     * @param saleId
     * @return
     *     returns es.udc.ws.movies.client.service.soap.wsdl.ServiceSaleDto
     * @throws SoapSaleExpirationException
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSale", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.FindSale")
    @ResponseWrapper(localName = "findSaleResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.movies.client.service.soap.wsdl.FindSaleResponse")
    @Action(input = "http://soap.ws.udc.es/MoviesProvider/findSaleRequest", output = "http://soap.ws.udc.es/MoviesProvider/findSaleResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/MoviesProvider/findSale/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapSaleExpirationException.class, value = "http://soap.ws.udc.es/MoviesProvider/findSale/Fault/SoapSaleExpirationException")
    })
    public ServiceSaleDto findSale(
        @WebParam(name = "saleId", targetNamespace = "")
        Long saleId)
        throws SoapInstanceNotFoundException, SoapSaleExpirationException
    ;

}
